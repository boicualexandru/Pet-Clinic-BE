// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using PetClinic.DataAccess.Models;
using System;

namespace PetClinic.DataAccess.Migrations
{
    [DbContext(typeof(PetClinicContext))]
    partial class PetClinicContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("dbo")
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("PetClinic.DataAccess.Models.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AppointmentTypeId");

                    b.Property<string>("ClientNotes");

                    b.Property<double?>("Cost");

                    b.Property<int>("MedicId");

                    b.Property<string>("MedicNotes");

                    b.Property<int>("PatientId");

                    b.Property<string>("Review");

                    b.Property<DateTime>("TimeEnd");

                    b.Property<DateTime>("TimeStart");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentTypeId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("PetClinic.DataAccess.Models.AppointmentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("AppointmentTypes");
                });

            modelBuilder.Entity("PetClinic.DataAccess.Models.Assistant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Assistants");
                });

            modelBuilder.Entity("PetClinic.DataAccess.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Contact")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("PetClinic.DataAccess.Models.Medic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Contact");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Medics");
                });

            modelBuilder.Entity("PetClinic.DataAccess.Models.MedicSkill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("MedicId");

                    b.Property<int>("SkillId");

                    b.HasKey("Id");

                    b.HasIndex("MedicId");

                    b.ToTable("MedicSkills");
                });

            modelBuilder.Entity("PetClinic.DataAccess.Models.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ClientId");

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<string>("Name");

                    b.Property<byte[]>("Photo");

                    b.Property<string>("Race");

                    b.Property<string>("Species");

                    b.Property<double>("Weight");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("PetClinic.DataAccess.Models.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("PetClinic.DataAccess.Models.Tariff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AppointmentTypeId");

                    b.Property<string>("Species")
                        .IsRequired();

                    b.Property<double>("Value");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentTypeId");

                    b.ToTable("Tariffs");
                });

            modelBuilder.Entity("PetClinic.DataAccess.Models.Appointment", b =>
                {
                    b.HasOne("PetClinic.DataAccess.Models.AppointmentType", "AppointmentType")
                        .WithMany("Appointments")
                        .HasForeignKey("AppointmentTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PetClinic.DataAccess.Models.MedicSkill", b =>
                {
                    b.HasOne("PetClinic.DataAccess.Models.Medic", "Medic")
                        .WithMany("MedicSkills")
                        .HasForeignKey("MedicId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PetClinic.DataAccess.Models.Skill", "Skill")
                        .WithMany("MedicSkills")
                        .HasForeignKey("MedicId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PetClinic.DataAccess.Models.Patient", b =>
                {
                    b.HasOne("PetClinic.DataAccess.Models.Client", "Client")
                        .WithMany("Patients")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PetClinic.DataAccess.Models.Tariff", b =>
                {
                    b.HasOne("PetClinic.DataAccess.Models.AppointmentType", "AppointmentType")
                        .WithMany("Tariffs")
                        .HasForeignKey("AppointmentTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
